<?php

namespace Tests\Feature;

use App\Models\Topic;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use phpDocumentor\Reflection\Types\This;
use Tests\TestCase;
use Tests\Traits\ActingJWTUser;

class TopicApiTest extends TestCase
{
    //每次测试后重置数据库
    use RefreshDatabase;
    use ActingJWTUser;
    protected $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user=User::factory()->create();
    }
    public function testStoreTopic(): void
    {
        $data=['category_id'=>1,'body'=>'test body','title'=>'test title'];
        //验证并发送数据
        $response=$this->JWTActing($this->user)
            ->json('post','/api/v1/topics',$data);
        $assertData=[
          'category_id'=>1,
          'user_id'=>$this->user->id,
          'title'=>'test title',
          'body'=>clean('test body','user_topic_body'),
        ];
        //断言
        $response->assertStatus(201)
            ->assertJsonFragment($assertData);
    }

    public function testUpdateTopic(): void
    {
        $topic=$this->makeTopic();
        $editData=['category_id'=>2,'body'=>'edit body','title'=>'edit title'];
        $response=$this->JWTActing($this->user)
            ->json('PATCH','/api/v1/topics/'.$topic->id,$editData);
        $assertData=[
            'category_id'=>2,
            'user_id'=>$this->user->id,
            'title'=>'edit title',
            'body'=>clean('edit body','user_topic_body'),
        ];
        $response->assertStatus(200)
            ->assertJsonFragment($assertData);
    }

    public function testShowTopic():void
    {
        $topic=$this->makeTopic();
        $response=$this->json('GET','/api/v1/topics/'.$topic->id);

        $assertData=[
          'category_id'=>$topic->category_id,
          'user_id'=>$topic->user_id,
          'title'=>$topic->title,
          'body'=>$topic->body,
        ];
        $response->assertStatus(200)
            ->assertJsonFragment($assertData);
    }
    public function testIndexTopic():void
    {
        $response=$this->json('GET','/api/v1/topics');
        $response->assertStatus(200)
            ->assertJsonStructure(['data','meta']);
    }
    public function testDeleteTopic():void
    {
        $topic=$this->makeTopic();
        $response=$this->JWTActing($this->user)
            ->json('DELETE','/api/v1/topics/'.$topic->id);
        $response->assertStatus(204);

        $response=$this->json('GET','/api/v1/topics/'.$topic->id);
        $response->assertStatus(404);
    }

    protected function makeTopic(){
        return Topic::factory()->create([
            'user_id'=>$this->user->id,
            'category_id'=>1,
        ]);
    }
}
